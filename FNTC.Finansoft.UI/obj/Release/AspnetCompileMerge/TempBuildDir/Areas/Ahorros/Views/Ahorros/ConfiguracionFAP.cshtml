@using FNTC.Finansoft.DTO.Aportes
@using FNTC.Finansoft.DTO.Respuestas 
@model FNTC.Finansoft.DTO.Ahorros.DTOConfiguracionAhorros

@{
    ViewBag.Title = "Configuracion Ahorro Permanente";
    Layout = "~/Views/Shared/_Layoutahorros.cshtml";
    DTOConfiguracionAportes configuracionAportes = ViewBag.configuracionAportes;
    DTORespuesta respuesta = ViewBag.respuesta;
}

@section Styles{
    <link href="~/Content/css/jquery-ui.min.css" rel="stylesheet" />
}

<div class="container" style="margin-top:2%; background: rgb(248, 248, 248);">
    <ul class="col-md-offset-2 nav nav-tabs" style="margin-top:2%;border: none; margin-left: 118px;">
        <li class="active"><a data-toggle="tab" href="#menu1" class="tabsnota"><i class="fa fa-file-text" aria-hidden="true"></i> Configuracion</a></li>
        <li><a href="/Ahorros/Ahorros/AhorroPermante" class="tabsnota"><i class="fa fa-calculator" aria-hidden="true"></i> Fichas Ahorro Permanente</a></li>
        <li><a href="/Ahorros/Ahorros/ConfiguracionFACDAT" class="tabsnota"><i class="fa fa-calculator" aria-hidden="true"></i> Fichas Ahorro CDAT</a></li>
        <li><a href="/Ahorros/Ahorros/ConfiguracionFAC" class="tabsnota"><i class="fa fa-calculator" aria-hidden="true"></i> Fichas Ahorro Contractual</a></li>        
    </ul>
    <div class="tab-content contenedortabs">
        <div id="menu1" class="tab-pane fade in active">
            <div class="col-md-12"><h3 style="border-bottom: 5px solid #2B7785 !important; width: 100%; color: #2B7785 !important; padding: 9px 20px 15px 0px !important;margin-bottom: 31px !important;">Configuracion Ahorros</h3></div>
            <div class="col-md-12">
               @using (Html.BeginForm("ConfiguracionFAP", "Ahorros", FormMethod.Post, new { id = "formAhorros", autocomplete = "off" }))
               {
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cuentaContable, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.cuentaContable, new { htmlAttributes = new { @class = "form-control cuentasContables", type = "text", nombreSpan = "nomCuentaContable", placeholder = "Cuenta contable" } })
                            <span class="input-group-addon" id="nomCuentaContable"></span>
                        </div>
                        @Html.ValidationMessageFor(model => model.cuentaContable, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control", placeholder = "Nombre" } })
                        @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.porcentajeParaAhorros, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.porcentajeParaAhorros, new { htmlAttributes = new { @class = "form-control", type = "number", placeholder = "Porcentaje para ahorros" } })
                            <span class="input-group-addon">%</span>
                        </div>
                        <span id="porcentajeMaximo"></span>
                        @Html.ValidationMessageFor(model => model.porcentajeParaAhorros, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.tasaEfectiva, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.tasaEfectiva, new { htmlAttributes = new { @class = "form-control", type = "number", placeholder = "Tasa Efectiva" } })
                            <span class="input-group-addon">%</span>
                        </div>
                        @Html.ValidationMessageFor(model => model.tasaEfectiva, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.multiplicador, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.multiplicador, new { htmlAttributes = new { @class = "form-control", type = "number", placeholder = "Multiplicador" } })
                        @Html.ValidationMessageFor(model => model.multiplicador, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.peridoLiquidacionMinima, htmlAttributes: new { @class = "control-label" })
                        @*@Html.EditorFor(model => model.peridoLiquidacionMinima, new { htmlAttributes = new { @class = "form-control", type = "number", placeholder = "Periodo De Liquidacion Minima" } })*@
                        <select name="peridoLiquidacionMinima" id="peridoLiquidacionMinima" class="form-control">
                            <option value="30">30 dias</option>
                            <option value="60">60 dias</option>
                            <option value="90">90 dias</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.peridoLiquidacionMinima, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.valorMinimo, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.valorMinimo, new { htmlAttributes = new { @class = "form-control", placeholder = "Valor Minimo" } })
                        @Html.ValidationMessageFor(model => model.valorMinimo, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.valorMaximo, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.valorMaximo, new { htmlAttributes = new { @class = "form-control", placeholder = "Valor Maximo" } })
                        @Html.ValidationMessageFor(model => model.valorMaximo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.diasGracia, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.diasGracia, new { htmlAttributes = new { @class = "form-control", type = "number", placeholder = "Dias De Gracia" } })
                            <span class="input-group-addon">dias</span>
                        </div>
                        @Html.ValidationMessageFor(model => model.diasGracia, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fuenteContable, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.fuenteContable, new { htmlAttributes = new { @class = "form-control", nombreSpan = "nomFuenteContable", placeholder = "Fuente Contable" } })
                            <span class="input-group-addon" id="nomFuenteContable"></span>
                        </div>
                        @Html.ValidationMessageFor(model => model.fuenteContable, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cuentaRetencion, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.cuentaRetencion, new { htmlAttributes = new { @class = "form-control cuentasContables", nombreSpan = "nomCuentaRetencion", placeholder = "Cuenta retencion" } })
                            <span class="input-group-addon" id="nomCuentaRetencion"></span>
                        </div>
                        @Html.ValidationMessageFor(model => model.cuentaRetencion, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cuentaGastoInteres, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.cuentaGastoInteres, new { htmlAttributes = new { @class = "form-control cuentasContables", nombreSpan = "nomCuentaGastoInteres", placeholder = "Cuenta gastos" } })
                            <span class="input-group-addon" id="nomCuentaGastoInteres"></span>
                        </div>
                        @Html.ValidationMessageFor(model => model.cuentaGastoInteres, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cuentaCausacion, htmlAttributes: new { @class = "control-labe" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.cuentaCausacion, new { htmlAttributes = new { @class = "form-control cuentasContables", nombreSpan = "nomCuentaCausacion", placeholder = "Cuenta causacion" } })
                            <span class="input-group-addon" id="nomCuentaCausacion"></span>
                        </div>
                        @Html.ValidationMessageFor(model => model.cuentaCausacion, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cuentaCortoPlazo, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.cuentaCortoPlazo, new { htmlAttributes = new { @class = "form-control cuentasContables", nombreSpan = "nomCuentaCortoPlazo", placeholder = "Cuenta corto plazo" } })
                            <span class="input-group-addon" id="nomCuentaCortoPlazo"></span>
                        </div>
                        @Html.ValidationMessageFor(model => model.cuentaCortoPlazo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.generaInteresCausacion, htmlAttributes: new { @class = "control-label" })
                        <select name="generaInteresCausacion" class="form-control">
                            <option value="true">Si</option>
                            <option value="false">No</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.generaInteresCausacion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="modal-footer">
                        <button id="guardarConfiguracion" type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </div>
               }
            </div><!--CONTENIDO TAB-->
        </div><!--MENU-->
    </div><!--CONTENEDOR TABS-->
</div>




@section Scripts{

@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/jquery-ui.min.js"></script>
<script src="~/Scripts/DinamismoCliente/formatMilesDec.js"></script>
<script src="~/Scripts/DinamismoCliente/Dinamismos.js"></script>

@*respuesta de cambios*@
    @if (respuesta != null)
    {
        if (respuesta.Mensaje != null)
        {
            var tipo = respuesta.Correcto ? "success" : "error";
            var titulo = respuesta.Correcto ? "Correcto" : "Error";
            <script>

                swal({title: "@titulo", text: "@respuesta.Mensaje" , type: "@tipo"});
            </script>
        }
    }
@*respuesta de cambios*@

@if (configuracionAportes == null)
{
    <script>swal({ title: "Sin Configuracion", text: "No se ha creado una configuracion para aportes", type: "warning", confirmButtonText: "Crear" }, function (isConfirm) { if (isConfirm) { location.href = "/Aportes/Aportes/Configuracion" } });</script>
}
else
{
    if (configuracionAportes.idTipoCuotaCalculo == 1 || configuracionAportes.idTipoCuotaCalculo == 2)
    {
        var porcentajeRestante = 100 - double.Parse(configuracionAportes.porcentajeCuota);
        <script>
                $("#porcentajeMaximo").text("Porcentaje Restante: @porcentajeRestante%");
        </script>
    }
    if (Model != null)
    {
        <script>
             $("#peridoLiquidacionMinima").val("@Model.peridoLiquidacionMinima");
        </script>
        
    }

    <script>

        //mascaras jqPrice
        //$("#valorMaximo").priceFormat();
        //$("#valorMinimo").priceFormat();
        //mascaras jqPrice

        //autocomplete cuenta Contable
        $(".cuentasContables").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/accounting/plandecuentas/GetCuentasAA",
                    type: "POST",
                    dataType: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.NOMBRE, value: item.CODIGO };
                        }));
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {                                
                $('#' + $(this).attr("nombreSpan")).text(ui.item.label);
                return false;
            }, change: function (event, ui) {
                if (!ui.item) {
                    $(this).val("");
                    $('#' + $(this).attr("nombreSpan")).text("");
                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            },
            focus: function (event, ui) {
                $('#' + $(this).attr("id")).val(ui.item.value);
                //$('.cuentasContables').val(ui.item.value);
                return false;
            }
        });//autocomplete cuenta Contable

        //AÑADIDO PARA AUTOCOMPLETE DE COMPROBANTES        
        $("#fuenteContable").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/accounting/TiposComprobantes/GetComprobantes",
                    type: "POST",
                    dataType: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.NOMBRE, value: item.CODIGO };
                        }));
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {
                $('#' + $(this).attr("nombreSpan")).text(ui.item.label);
                return false;
            }, change: function (event, ui) {
                if (!ui.item) {
                    $(this).val("");
                    $('#' + $(this).attr("nombreSpan")).text("");
                }
            },
            open: function () {
                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            },
            close: function () {
                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            },
            focus: function (event, ui) {
                $('#' + $(this).attr("id")).val(ui.item.value);
                //$('.cuentasContables').val(ui.item.value);
                return false;
            }
        });
        //AÑADIDO PARA AUTOCOMPLETE DE COMPROBANTES

        //validacion antes del submit
        $("#guardarConfiguracion").on("click", function (e) {
            e.preventDefault();

            if (parseFloat(quitarFormato($("#valorMinimo").val())) > parseFloat(quitarFormato($("#valorMaximo").val()))) {
                swal({ title: "Revisa", text: "El saldo minimo es mayor que el saldo maximo", type: "warning" });
            } else {                
                swal({ title: "Estas Seguro?", text: "Las fichas de Ahorros se modificaran, esta seguro de continuar con la operacion?", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "Si, Continuar", cancelButtonText: "No, Cancelar", closeOnConfirm: true, closeOnCancel: true }, function (isConfirm) {
                    if (isConfirm) {
                        $("#formAhorros").submit();
                    }
                });
            }            
        });//validacion antes del submit

    </script>


}


}