@model FNTC.Finansoft.Accounting.DTO.Nomina.ArchivoPlano

@{

    var action = (string)ViewBag.action;
    var boton = (string)ViewBag.boton;

    var TipoDato = @ViewBag.TipoDato;
    var Alineación = @ViewBag.Alineación;
    var Relleno = @ViewBag.Relleno;
    var ValPredeterminado = @ViewBag.ValPredeterminado;
}

@if (ViewBag.guardado == "S")
{
    <script>
        recargar();
    </script>
}
else
{
    <div class="modal-body">


        @using (Html.BeginForm(action, "ArchivoPlano", new { area = "Nomina" }, FormMethod.Post, new { id = "theForm", autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <div class="modalheadergeneral"> <h4> Archivo Plano</h4></div>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.CLASEPLANO, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*  @Html.EditorFor(model => model.CLASEPLANO, new { htmlAttributes = new { @class = "form-control" } })*@

                        @Html.DropDownListFor(model => model.CLASEPLANO, new SelectList(@ViewBag.CP, "Id", "Nombre"), "Seleccione opción...", new { @class = "form-control", @required = "required", @id = "Plano" })
                        @Html.ValidationMessageFor(model => model.CLASEPLANO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TIPCAMPO, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.TIPCAMPO, new SelectList(@ViewBag.TC, "Id", "NOMBRECAMPO"), "Seleccione opción...", new { @class = "form-control", @required = "required" })
                        @* @Html.EditorFor(model => model.TIPCAMPO, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.TIPCAMPO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CONCEPTO, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CONCEPTO, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.CONCEPTO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TIPDATO, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.TIPDATO, new SelectList(TipoDato, "Value", "Text"), "Seleccione opción...", new { @class = "form-control", @required = "required", @id = "tipoDato" })
                        @Html.ValidationMessageFor(model => model.TIPDATO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LONGITUD, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LONGITUD, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "number", @min = "0", @pattern = "^[0-9]+", @id = "Longitud" } })
                        @Html.ValidationMessageFor(model => model.LONGITUD, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ALINEACION, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ALINEACION, new SelectList(Alineación, "Value", "Text"), "Seleccione opción...", new { @class = "form-control", @required = "required", @id = "Alineacion" })
                        @Html.ValidationMessageFor(model => model.ALINEACION, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RELLENO, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.RELLENO, new SelectList(Relleno, "Value", "Text"), "Seleccione opción...", new { @class = "form-control", @required = "required", @id = "Relleno" })
                        @Html.ValidationMessageFor(model => model.RELLENO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.VALPREDETERINADO, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.VALPREDETERINADO, new SelectList(ValPredeterminado, "Value", "Text"), "Seleccione opción...", new { @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(model => model.VALPREDETERINADO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DIGVALOR, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DIGVALOR, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "number", @value = "0", @min = "0", @pattern = "^[0-9]+", @disabled = true } })
                        @Html.ValidationMessageFor(model => model.DIGVALOR, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NUMDECIMALES, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NUMDECIMALES, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "number", @value = "1", @min = "0", @pattern = "^[0-9]+" } })
                        @Html.ValidationMessageFor(model => model.NUMDECIMALES, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*
                    <div class="form-group">
                        @Html.LabelFor(model => model.ORDEN, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ORDEN, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ORDEN, "", new { @class = "text-danger" })
                        </div>
                    </div>
                *@
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                        <button type="button" id="close" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i> Cerrar</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <script>

        $(document).ready(function () {


        });
        //Al Ocultar el modal
        $(document.body).on('hidden.bs.modal', function () {
            $('#centro').removeData('bs.modal');
        });

        $("#theForm").submit(function (event) {
            event.preventDefault();
       
                $("#Longitud").prop("disabled", false);              
                $("#Alineacion").prop("disabled", false);            
                $("#Relleno").prop("disabled", false);              
                $("#VALPREDETERINADO").prop("disabled", false);              
                $("#NUMDECIMALES").prop("disabled", false);             
                $("#DIGVALOR").prop("disabled", false);
                    
         
            var theForm = $(this);
            var theAction = theForm.attr("action");
            //if (!theForm.valid()) {
            //    return false;
            //}
            $.post('/Nomina/ArchivoPlanos/Create', theForm.serialize())
                .done(function (result) {
                    event.preventDefault();
                    swal({
                        title: "",
                        type: "success",
                        text: "Datos Guardados Correctamente..",
                        confirmButtonText: "Ok!",
                    }, function () {

                        $("#close").click();
                    });

                });
        });


    </script>
    <script>
        $(document).ready(function () {
            $("#DIGVALOR").val("0");

            $("#VALPREDETERINADO").change(function () {

                var predeterminado = $("#VALPREDETERINADO").val();
                if (predeterminado == "SI") {
                    $("#DIGVALOR").prop("disabled", false);
                    $("#DIGVALOR").val("");
                }
                else
                    if (predeterminado == "NO") {
                        $("#DIGVALOR").prop("disabled", true);
                        $("#DIGVALOR").val("0");
                    }
                // $('#NOMBRE').val("");

                // });
            });
        });

    </script>
    <script>
        //BLOQUEAR Y DESBLOQUEAR CAMPOS
    $("#Plano").change(function () {
    
        var Plano = $("#Plano").val();

        if (Plano != "") {
                    $('#mitabla tr').empty();
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetDatosPlano", "ArchivoPlanos")",
                        datatype: "Json",
                        data: { Plano: $('#Plano').val() },
                        success: function (data) {
                            var Extension = (data[0]);
                            if (Extension == "EX") {
                                $("#Longitud").prop("disabled", true);
                                $("#Longitud").val("0");
                                $("#Alineacion").prop("disabled", true);
                                $("#Alineacion").val("IZQUIERDA");
                                $("#Relleno").prop("disabled", true);
                                $("#Relleno").val("BLANCOS");
                                $("#VALPREDETERINADO").prop("disabled", true);
                                $("#VALPREDETERINADO").val("NO");
                                $("#NUMDECIMALES").prop("disabled", true);
                                $("#NUMDECIMALES").val("0");
                                $("#DIGVALOR").prop("disabled", true);
                                $("#DIGVALOR").val("0");
                            }
                            else {
                                $("#Longitud").prop("disabled", false);
                                $("#Longitud").val("");
                                $("#Alineacion").prop("disabled", false);
                                $("#Alineacion").val("");
                                $("#Relleno").prop("disabled", false);
                                $("#Relleno").val("");
                                $("#VALPREDETERINADO").prop("disabled", false);
                                $("#VALPREDETERINADO").val("");
                                $("#NUMDECIMALES").prop("disabled", false);
                                $("#NUMDECIMALES").val("");
                               // $("#DIGVALOR").prop("disabled", false);
                                $("#DIGVALOR").val("0");
                                    
                                //es por los disable que no los esta enviando
                            }
                        }
                    });
                }
            }
        });

    </script>
}