@model FNTC.Finansoft.Accounting.DTO.Tesoreria.TsorConsecutivosChequera

@{
    Layout = "~/Views/Shared/_LayoutTesoreria.cshtml";
}
@{
    ViewBag.Title = "Crear Chequera";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.codigoChequera, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1">
            @Html.EditorFor(model => model.codigoChequera, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.codigoChequera, "", new { @class = "text-danger" })
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.codigoBancoMatriculado, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1">
            @Html.EditorFor(model => model.codigoBancoMatriculado, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.codigoBancoMatriculado, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-4">
            <input type="text" id="descripcionCodigoBancoMatriculado" class="form-control" readonly>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.consecutivoInicial, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1">
            @Html.EditorFor(model => model.consecutivoInicial, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.consecutivoInicial, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.consecutivoFinal, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1">
            @Html.EditorFor(model => model.consecutivoFinal, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.consecutivoFinal, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.consecutivoActual, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1">
            @Html.EditorFor(model => model.consecutivoActual, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.consecutivoActual, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.numeroAlertaChequesAgotados, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1">
            @Html.EditorFor(model => model.numeroAlertaChequesAgotados, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.numeroAlertaChequesAgotados, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.estado)
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.alertaChequesAgotados, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.alertaChequesAgotados)
                @Html.ValidationMessageFor(model => model.alertaChequesAgotados, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="btnCrear" value="Crear" class="btn btn-primary large" />
            @Html.ActionLink("Regresar a la Lista", "Index", null, null, new { @class = "btn btn-success btn-large" })
        </div>
    </div>
</div>
}

<script>
    $(document).ready(function () {
        $("#btnCrear").prop("disabled", true);

        $.ajax({
            type: "POST",
            url: "@Url.Action("GetUltimoCodigoChequeras", "Chequeras")",
            datatype: "Json",
            success: function (data) {
                var iNum = parseInt(data);
                $("#codigoChequera").val(iNum+1);
            }
        });
    });

    $("#codigoBancoMatriculado").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: "/Tesoreria/Chequeras/GetBancosMatriculados",
                //url: "/accounting/plandecuentas/GetCuentas4Selects",
                type: "POST",
                dataType: "json",
                data: {
                    term: request.term
                },
                success: function (data) {
                    response($.map(data, function (item) {
                        return { label: item.TsorBancos.CuentaMayor.NOMBRE, value: item.codigo };
                    }));
                }
            });
        },
        minLength: 1,
        select: function (event, ui) {
            $('#descripcionCodigoBancoMatriculado').val(ui.item.label);
            return false;
        }, change: function (event, ui) {
            if (!ui.item) {
                $(this).val("");
                $('#descripcionCodigoBancoMatriculado').val("");
            }
        },
        open: function () {
            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
        },
        close: function () {
            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
        },
        focus: function (event, ui) {
            $('#codigoBancoMatriculado').val(ui.item.value);
            return false;
        }
    });

    $("#consecutivoInicial").change(function () {
        $("#btnCrear").prop("disabled", true);       
        var consecutivoInicial = parseInt($("#consecutivoInicial").val());
        var consecutivoFinal = parseInt($("#consecutivoFinal").val());
        var numeroAlertaChequesAgotados = parseInt($("#numeroAlertaChequesAgotados").val());
        $("#consecutivoActual").val(consecutivoInicial);

        if ($("#codigoBancoMatriculado").val() != "") {
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetConsecutivoOtrasChequeras", "Chequeras")",
                datatype: "Json",
                data: { ConsecutivoIni: $("#consecutivoInicial").val(), Banco: $("#codigoBancoMatriculado").val()},//solo para enviar datos
                success: function (data) {
                    var anteriorConsecutivoFinal = parseInt(data);
                    if (consecutivoInicial <= anteriorConsecutivoFinal) {
                        swal({
                            title: "Alerta",
                            type: "info",
                            text: "El consecutivo inicial debe ser mayor al consecutivo final de la chequera anterior",
                        })
                        consecutivoInicial = parseInt($("#consecutivoInicial").val(""));
                        $("#consecutivoActual").val("");
                    }
                }
            });
        }

        if (!isNaN(consecutivoInicial)) {
            if (!isNaN(consecutivoFinal)) {
                if (consecutivoInicial < consecutivoFinal) {
                    if (!isNaN(numeroAlertaChequesAgotados)) {
                        if (consecutivoInicial < numeroAlertaChequesAgotados) {
                            $("#btnCrear").prop("disabled", false);                       
                        } else {
                            swal({
                                title: "Alerta",
                                type: "info",
                                text: "El consecutivo inicial debe ser menor al numero de alerta de cheques agotados",
                            })
                        }
                    }
                } else {
                    swal({
                        title: "Alerta",
                        type: "info",
                        text: "El consecutivo inicial debe ser menor al consecutivo Final",
                    })
                }
            }           
        }
    });
    $("#consecutivoFinal").change(function () {
        $("#btnCrear").prop("disabled", true);
        var consecutivoInicial = parseInt($("#consecutivoInicial").val());
        var consecutivoFinal = parseInt($("#consecutivoFinal").val());
        var consecutivoActual = $("#consecutivoActual").val();
        var numeroAlertaChequesAgotados = parseInt($("#numeroAlertaChequesAgotados").val());
        if (!isNaN(consecutivoInicial)) {
            if (!isNaN(consecutivoFinal)) {
                if (consecutivoInicial < consecutivoFinal) {
                    if (!isNaN(numeroAlertaChequesAgotados)) {
                        if (consecutivoFinal > numeroAlertaChequesAgotados) {
                            if (consecutivoInicial < numeroAlertaChequesAgotados) {
                                $("#btnCrear").prop("disabled", false);
                            } else {
                                swal({
                                    title: "Alerta",
                                    type: "info",
                                    text: "El consecutivo inicial debe ser menor al numero de alerta de cheques agotados",
                                })
                            }
                        } else {
                            swal({
                                title: "Alerta",
                                type: "info",
                                text: "El consecutivo final debe ser mayor al numero de alerta de cheques agotados",
                            })
                        }
                    }                 
                } else {
                    swal({
                        title: "Alerta",
                        type: "info",
                        text: "El consecutivo inicial debe ser menor al consecutivo Final",
                    })
                }
            }
        }
    });
    $("#numeroAlertaChequesAgotados").change(function () {
        $("#btnCrear").prop("disabled", true);
        var consecutivoInicial = parseInt($("#consecutivoInicial").val());
        var consecutivoFinal = parseInt($("#consecutivoFinal").val());
        var consecutivoActual = $("#consecutivoActual").val();
        var numeroAlertaChequesAgotados = parseInt($("#numeroAlertaChequesAgotados").val());
        if (!isNaN(consecutivoInicial)) {
            if (!isNaN(consecutivoFinal)) {
                if (consecutivoInicial < consecutivoFinal) {
                    if (!isNaN(numeroAlertaChequesAgotados)) {
                        if (consecutivoFinal > numeroAlertaChequesAgotados) {
                            if (consecutivoInicial < numeroAlertaChequesAgotados) {
                                $("#btnCrear").prop("disabled", false);
                            } else {
                                swal({
                                    title: "Alerta",
                                    type: "info",
                                    text: "El consecutivo inicial debe ser menor al numero de alerta de cheques agotados",
                                })
                            }
                        } else {
                            swal({
                                title: "Alerta",
                                type: "info",
                                text: "El consecutivo final debe ser mayor al numero de alerta de cheques agotados",
                            })
                        }
                    }
                } else {
                    swal({
                        title: "Alerta",
                        type: "info",
                        text: "El consecutivo inicial debe ser menor al consecutivo Final",
                    })
                }
            }
        }
    });
</script>