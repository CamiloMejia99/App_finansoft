@model FCSolicitudes
@using FNTC.Finansoft.Accounting.DTO.MCreditos;
@using FNTC.Finansoft.Accounting.DTO.FabricaCreditos
@using FNTC.Finansoft.Accounting.DTO.OperativaDeCaja
@{
    ViewBag.Title = "CrearSolicitud";
    Layout = "~/Views/Shared/_Layoutcreditos.cshtml";
    var fecha = DateTime.Now.ToString("yyyy-MM-dd");
    var idAsociado = ViewBag.idAsociado;
    var nomAsociado = ViewBag.nombreAsociado;

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group col-md-4">
            <label class="control-label">Identificacion del Asociado:</label>
            <input type="text" name="idAsociado" id="idAsociado" class="form-control" value="@idAsociado" readonly />
        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Asociado:</label>
            <input type="text" name="nomAsociado" id="nomAsociado" class="form-control" value="@nomAsociado" readonly />
        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Fecha de solicitud:</label>
            <input type="text" class="form-control" value="@fecha" readonly />
        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Actividad:</label>

            @Html.Action("ListaActividad", "CrearSolicitud")
            @Html.ValidationMessageFor(model => model.idActividad, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Ente Aprobatorio:</label>

            @Html.Action("ListaDependencia", "CrearSolicitud")
            @Html.ValidationMessageFor(model => model.idDependencia, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Sede De Aprobatorio:</label>

            @Html.Action("ListaSedes", "CrearSolicitud")
            @Html.ValidationMessageFor(model => model.idSede, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Central De Riesgo:</label>

            @Html.Action("ListaCentral", "CrearSolicitud")
            @Html.ValidationMessageFor(model => model.idCentralDeRiesgo, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Prestamo A Evaluar:</label>

            @Html.Action("ListaCreditos", "CrearSolicitud")
            @Html.ValidationMessageFor(model => model.idPrestamo, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-4">
            <label class="control-label">Prioridad:</label>

            @Html.Action("ListaPrioridad", "CrearSolicitud")
            @Html.ValidationMessageFor(model => model.idPrioridad, "", new { @class = "text-danger" })

        </div>

        <br>
        <div class="form-horizontal">
            <br>
            <input type="submit" value="Crear Solicitud" class="btn btn-primary" />
        </div>
        <br>


        <div class="row">

            @* -------------------------------------------------------------------------------------------------------------------------------- *@
            <div style="width:100%; margin:0 auto" class="tablecontainer">

                <table id="tablaCreditos" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered table-condensed">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>NIT</th>
                            <th>NOMBRE</th>
                            <th>PAGARE</th>
                            <th>Fecha Creacion</th>
                            <th>Valor del Prestamo</th>
                            <th>Plazo</th>
                            <th>Interes</th>
                            <th>Amortizacion</th>

                        </tr>
                    </thead>
                </table>
            </div>
            @* -------------------------------------------------------------------------------------------------------------------------------- *@
            <div class="modal fade" id="detailsAssetModal" tabindex="-1" role="dialog" aria-labelledby="DetailsAssetModal" aria-hidden="true" data-backdrop="static">
                <input type="text" id="alertaComprobante" value=@ViewBag.alerta hidden="hidden">
                <div id="detailsAssetContainer">

                </div>
            </div>
            @* -------------------------------------------------------------------------------------------------------------------------------- *@
            <div class="modal fade" id="desembolsoModal" tabindex="-1" role="dialog" aria-labelledby="desembolsoModal" aria-hidden="true" data-backdrop="static">

                <div id="desembolsoContainer">

                </div>
            </div>
            @* -------------------------------------------------------------------------------------------------------------------------------- *@
        </div>


    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqPriceFormat")
    @Scripts.Render("~/bundles/adminDataTables")
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script>
    var columnas = [
        { data: "id" },
        { data: "NIT" },
        { data: "NOMBRE" },
        { data: "Pagare" },
        { data: "Fecha_Prestamo" },
        { data: "Capital", "width": "90px", "render": function (data) { return formatNumberMiles.new(data);} },
        { data: "Plazo" },
        { data: "Interes" },
        { data: "id", "width": "50px", "render": function (data) { return ' <a href="@Url.Action("_Amortizacion", "Creditos")?id=' + data + '" class="detailsAsset btn btn-info btn-xs">Amortizacion</a>'; } },

        ];


        var botones = [

            {
                extend: 'collection',
                text: 'Vista Previa Prestamos',
                autoClose: true,
                buttons: [
                    {
                        extend: 'excel',
                        text: "Exportar a Excel",
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7]
                        }

                    }
                ]
            }
        ];
        agregarDataTable("#tablaCreditos", columnas, '/Creditos/Creditos/ObtenerCreditos', botones, false, true, true);
        table.columns(0).visible(false);

        function agregarDataTable(tabla, columnas, urlDatos, botones, scroll, buscador, seleccion) {
            var TraduccionDatatable = {
                "sProcessing": "Procesando...", "sLengthMenu": "Mostrar _MENU_ registros", "sZeroRecords": "No se encontraron resultados", "sEmptyTable": "No hay registros", "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros", "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros", "sInfoFiltered": "(filtrado de un total de _MAX_ registros)", "sInfoPostFix": "", "sSearch": "Buscar:", "sUrl": "", "sInfoThousands": ",", "sLoadingRecords": "Cargando...", "select": { "rows": { _: "Has seleccionado %d filas", 0: "", 1: "1 fila seleccionada" } }, "oPaginate": { "sFirst": "<<", "sLast": ">>", "sNext": ">", "sPrevious": "<" }, "oAria": { "sSortAscending": ": Activar para ordenar la columna de manera ascendente", "sSortDescending": ": Activar para ordenar la columna de manera descendente" }
            };
            // iris2 = iris[c(1;10, 51:60, 101:110), ]
            table = $(tabla).DataTable({
                dom: 'Bfrtip',
                ajax: {
                    type: "POST",
                    url: urlDatos,
                    contentType: 'application/json; charset=utf-8',
                    data: function (data) { return data = JSON.stringify(data); }
                },
                searching: buscador,
                lengthChange: false,
                autoWidth: false,
                scrollX: scroll,
                columns: columnas,
                buttons: botones,
                deferRender: true,
                select: seleccion,
                language: TraduccionDatatable
            });
            table.buttons().container().appendTo('.col-sm-6:eq(0)');
        }

        //desde

        //fin desde


        function FormatoFecha(Jsonfecha) {
            var value = new Date
            (
                 parseInt(Jsonfecha.replace(/(^.*\()|([+-].*$)/g, ''))
            );
            var dat = value.getDate() +
                                   "/" +
                (value.getMonth() + 1) +
                                   "/" +
                   value.getFullYear() +
                                   " " +
                      value.getHours() +
                                   ":" +
                    value.getMinutes() +
                                   ":" +
                   value.getSeconds();
            return dat;
        }

        $('#tablaCreditos').on("click", ".detailsAsset", function (event) {

            event.preventDefault();

            var url = $(this).attr("href");


            $.get(url, function (data) {


                $('#detailsAssetContainer').html(data);

                $('#detailsAssetModal').modal('toggle');
            });



        });




    </script>



    <script>
        //FORMATEAR UN NUMERO
        var formatNumberMiles = {
            separador: ".", // separador para los miles
            sepDecimal: ',', // separador para los decimales
            formatear: function (num) {
                num += '';
                var splitStr = num.split('.');
                var splitLeft = splitStr[0];
                var splitRight = splitStr.length > 1 ? this.sepDecimal + splitStr[1] : '';
                var regx = /(\d+)(\d{3})/;
                while (regx.test(splitLeft)) {
                    splitLeft = splitLeft.replace(regx, '$1' + this.separador + '$2');
                }
                return this.simbol + splitLeft + splitRight;
            },
            new: function (num, simbol) {
                this.simbol = simbol || '';
                return this.formatear(num);
            }
        }


    </script>

}
