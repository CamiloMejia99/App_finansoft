@model FNTC.Finansoft.Accounting.DTO.MCreditos.Cuentas
@using Mvc.CascadeDropDown

@{
    Layout = "~/Views/Shared/_Layoutcreditos.cshtml";
}

@{
    ViewBag.Title = "EDITAR";
}

<script src="~/Scripts/sweetalert2@10.js"></script>
<script src="~/Scripts/sweetalert.min.js"></script>
<link href="~/Content/css/sweetalert.css" rel="stylesheet" />
<script src="~/Scripts/Creditos/ValidacionesAgregarCuenta.js"></script>

@using (Html.BeginForm("Edit", "Cuentas", new { area = "Creditos" }, FormMethod.Post, new { id = "theForm" }))
{
    @Html.AntiForgeryToken()
    <input type="text" id="Funcion" value="" name="Funcion" hidden="hidden">
    <input type="text" id="TipoComprobante" value="" name="TipoComprobante" hidden="hidden">

    <div class="form-horizontal">
        <h4>Cuentas</h4>
        <br />
        <div>

            @{
                if (TempData["error"] != null)
                {
                    <div class="alert alert-warning" style="margin-left:25px; margin-right:5px">
                        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                        <strong>Advertencia!</strong> @TempData["error"]
                    </div>
                }
            }
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.Cuenta_Cod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Cuenta_Cod, new { htmlAttributes = new { @class = "form-control", @maxlength = 9, minlength = 9 } })
                @Html.ValidationMessageFor(model => model.Cuenta_Cod, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cuenta_Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Cuenta_Descripcion, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Cuenta_Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Funcion</label>
            <div class="col-md-4">
                @Html.DropDownList("funcionCuenta", null, "Seleccione una Funcion", new { @class = "form-control", @id = "func" })
                @Html.ValidationMessageFor(model => model.Funcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Tipo Comprobante</label>
            <div class="col-md-4">
                @Html.DropDownList("tiposComprobantes", null,"Seleccione un Comprobante", new { @class = "form-control", @id = "tipComp" })
                @Html.ValidationMessageFor(model => model.TipoComprobante, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Línea</label>
            <div class="col-md-4">
                @Html.DropDownList("lineas", null, "Seleccione una Línea", new { @class = "form-control", @id = "lineaId", required = "required" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Destino</label>
            <div class="col-md-4">
                @Html.CascadingDropDownListFor(
                                           expression: m => m.Destino_Id,
                                           triggeredByPropertyWithId: "lineaId",
                                           url: Url.Action("Destinos", "../Creditos/Destinos/"),
                                           ajaxActionParamName: "Lineas_Id",
                                           optionLabel: "Seleccione un Destino",
                                           disabledWhenParentNotSelected: true,
                                           htmlAttributes: new { @class = "form-control", required = true, @id = "destinoId" })

                @Html.ValidationMessageFor(model => model.Destino_Id, "", new { @class = "text-danger" })

            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="editar" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Regresar a la Lista", "Index")
</div>

<!--<script>
    //$('#editar').click(function () {
    //    $("#Funcion").val($("#func").val());
    //    $("#TipoComprobante").val($("#tipComp").val());
    //    $('#theForm').submit();
    //});-->

    @*$("#func").change(function () {
        $.ajax
        ({
            type: "POST",
            url: "@Url.Action("ValidacionFuncion", "Cuentas")",
            datatype: "Json",
            data: { func: $('#func').val() },
            success: function (data) {
                if (data == false) {
                    swal({
                        title: "Alerta",
                        type: "info",
                        text: "La funcion seleccionada ya se encuentra asignada a otra cuenta",
                    })
                    $('#func').val("");
                }
            }
        });
    });*@

   <!--/* autocomplete cuenta Contable #CAMBIOS JUN/2017*/
    $("#Cuenta_Cod").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: "/accounting/plandecuentas/GetCuentasAA",
               // url: "/accounting/plandecuentas/GetCuentas4Selects",
                type: "POST",
                dataType: "json",
                data: {
                    term: request.term
                },
                success: function (data) {
                    response($.map(data, function (item) {
                        return { label: item.NOMBRE, value: item.CODIGO };
                    }));
                }
            });
        },
        minLength: 1,
        select: function (event, ui) {
            $('#Cuenta_Descripcion').val(ui.item.label);
            return false;
        }, change: function (event, ui) {
            if (!ui.item) {
                $(this).val("");
                $('#Cuenta_Descripcion').val("");
            }
        },
        open: function () {
            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
        },
        close: function () {
            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
        },
        focus: function (event, ui) {
            $('#Cuenta_Cod').val(ui.item.value);
            return false;
        }
    });//autocomplete cuenta Contable
</script>-->